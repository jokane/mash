"""Methods for compiling LaTeX documents."""

# vim: set ft=python :

# pylint: disable=consider-using-f-string
# pylint: disable=invalid-name
# pylint: disable=no-else-return
# pylint: disable=too-many-arguments
# pylint: disable=too-many-branches
# pylint: disable=too-many-locals
# pylint: disable=too-many-statements
# pylint: disable=unused-wildcard-import
# pylint: disable=unused-wildcard-import
# pylint: disable=wildcard-import
# pylint: disable=duplicate-code

[[[ include mashlib.mash ]]]

[[[

# Which LaTeX compiler should we use?  Choices are:
# -- pdflatex (default)
# -- latex
# -- xelatex
# This affects both the specific compiler used and the graphics formats.
try:
    latex_mode
except NameError:
    latex_mode = 'pdflatex'

def latex(name, compiler=None, ignore_deps=None, keep_pdf=True, callback=None,
          max_compiles=None, strict=False):
    """Compile a frame as a LaTeX document."""

    assert isinstance(name, str)

    # Complain in old documents.
    if compiler is not None:
        raise ValueError('Compiler argument to latex() is no longer supported. '
                        'Set the latex_mode variable instead.')

    # Write the document.
    save(name + ".tex")

    # Build a list of dependencies.

    # Patterns to find dependencies.  Each one should be a tuple, with:
    # - A regex with a group named 'dep' that gives the stuff to match, and
    # - A function to return a list of things to depend on, or None, if the
    # 'dep' group matches the name directly.
    bib_split =  lambda x: [y if y.endswith('.bib') else y + '.bib' for y in x.split(',')]
    dep_patterns = [
      (r'\\includegraphics(\[.*?\])?{(?P<dep>[^}]*)}', None),
      (r'\\lstinputlisting(\[.*?\])?{(?P<dep>[^}]*)}', None),
      (r'\\input{(?P<dep>[^}]*)}', None),
      (r'\\includepdf{(?P<dep>[^}]*)}', None),
      (r'% dep (?P<dep>[^\n]*)', None),
      (r'\\bibliography{(?P<dep>[^\n]*)}', bib_split)
    ]

    deps = [name + ".tex"]
    for pattern,func in dep_patterns:
        for match in re.finditer(pattern, self.content, re.DOTALL):
            if func:
                deps = deps + func(match.group('dep'))
            else:
                deps.append(match.group('dep'))

    if ignore_deps is None:
        ignore_deps = []
    deps = [item for item in deps if item not in ignore_deps]
    deps = [item for item in deps if not re.match('#.*', item)]

    if not recall(name+".pdf", *deps):
        # Run the compiler over and over until the log stops changing.
        last_log = ''
        bibtex_done = False
        makeindex_done = False
        callback_done = False
        compiles = 0
        while True:
            compiles+=1
            try:
                shell(f"{latex_mode} --shell-escape -interaction=batchmode "
                      f"-file-line-error -halt-on-error {name}")
            except subprocess.CalledProcessError as e:
                with open(f'{name}.log', 'r', encoding='utf-8') as it:
                    e.stderr = it.read()
                raise e


            with open(f'{name}.log', 'r', encoding='utf-8') as it:
                log = it.read()

            if not callback_done and callable(callback):
                callback()
                callback_done = True

            if not bibtex_done:
                with open(f'{name}.aux', 'r', encoding='utf-8') as it:
                    aux = it.read()
                if re.search(r'\\citation', aux):
                    shell(f"bibtex -terse {name}")
                    bibtex_done = True

            if not makeindex_done and os.path.isfile(name+".idx"):
                shell("makeindex %s.idx" % name)
                makeindex_done = True

            if max_compiles and compiles >= max_compiles:
                break

            if log == last_log:
                break

            last_log = log

        if latex_mode == 'latex':
            shell(f'dvipdf -dALLOWTRANSPARENCY {name}.dvi')

        # If we are doing strict checking, dig through the final log, looking
        # for problems.
        if strict:
            complaints = check_latex_log(log)
            if complaints:
                # Found something wrong.  Complain about it.
                os.remove(name+".pdf")
                raise Exception(complaints)

    if keep_pdf:
        keep(name+".pdf")

def check_latex_log(log):
    """ Given the contents of a LaTeX log file, check it for important
    warnings.  Return a string describing the complaints, or None if there's
    nothing to complain about. """

    print(log)
    problem_patterns = [
      r"LaTeX Warning: Reference `.*' on page \d+ undefined on input line \d+.",
      r"LaTeX Warning: Citation `.*' on page \d+ undefined on input line \d+."
    ]

    complaints = []

    for pattern in problem_patterns:
        for match in re.finditer(pattern, log):
            complaints.append(match.group(0))

    if complaints:
        return '\n'.join(complaints)
    else:
        return None


def dot(name=None, via_xfig=False, xfig_direct=True, args=''):
    """Compile this frame as a graphviz document and insert the image into the
    parent frame."""

    # If we don't have any text in the frame, complain.
    if not self.content.strip():
        raise ValueError("Called dot() on an empty frame.  This is unlikely to end well.")

    # If we don't have a name, make one up.
    if not name:
        name = anonymous_name()

    # Figure out which format we should convert to.
    if latex_mode == 'latex':
        fmt = 'eps'
    else:
        fmt = 'pdf'

    name_dot = ext(name, 'dot')
    name_fig = ext(name, 'fig')
    name_fmt = ext(name, fmt)
    save(name_dot)
    if via_xfig:
        if not recall(name_fig, name_dot):
            shell("dot -Tfig %s > %s" % (name_dot, name_fig))
        xfig(name_fig, args, direct=xfig_direct)
    else:
        if not recall(name_fmt, name_dot):
            shell("dot -T%s %s > %s" % (fmt, name_dot, name_fmt))
        push("\\includegraphics[%s]{%s}" % (args, name_fmt))

def xfig(fname_fig, args='', direct=True, include_depths=None, exclude_depths=None):
    """Insert an xfig diagram."""

    # Sanity check.
    if include_depths and exclude_depths:
        raise ValueError("Got both include_depths and exclude_depths.  Can't do both.")

    with open(fname_fig, 'r', encoding='utf-8') as it:
        fig_source = it.read()

    # Find any referenes to embedded images.
    deps = []
    pattern = r'^(2 5 ([0-9\.-]*\s+){13}[0-9\.-]*$\s*\d\s*(.*))'
    for match in re.finditer(pattern, fig_source, re.MULTILINE):
        pic = match.group(3)
        imprt(pic)
        deps.append(pic)

    # Figure out which format we should convert to.
    if latex_mode == 'latex':
        fmt = 'eps'
        shfmt = 'ps'
    else:
        fmt = 'pdf'
        shfmt = 'pdf'

    # Get the main root filename.
    fname = ext(fname_fig, '')[:-1]

    # Sort out the include/exclude business.
    fig2dev_args = ""
    if include_depths or exclude_depths:
        # Which list are we working with?
        if include_depths:
            flag = '+'
            depths = include_depths
        if exclude_depths:
            flag = '-'
            depths = exclude_depths

        # Make sure we actually have a list.
        try:
            iter(depths)
        except TypeError:
            depths = (depths, )

        # Put the list into the format fig2dev expects.
        depths = flag + ",".join(map(str, depths))

        # Append this string to the file name, so we can build distinct
        # versions of the same fig from different depths.
        fname += "-depths" + depths

        # Make sure fig2dev gets the message about which depths we want.
        fig2dev_args += "-K -D" + depths

    fname_fmt = ext(fname, fmt)
    fname_tex = ext(fname, 'tex')

    if direct:
        # Convert to the two part pdf/latex or ps/latex form.  Typesets using
        # LaTeX, but cannot accept includegraphics arguments.
        if args != '':
            raise ValueError("Don't know what to do with args in xfig() with "
                            r"direct=True.  Maybe wrap in a \resizebox instead?")

        if not recall(fname_fmt, fname_fig, *deps):
            shell("fig2dev -L %stex %s -O %s > %s" % (shfmt, fig2dev_args, fname_fig, fname_fmt))
        if not recall(fname_tex, fname_fig, *deps):
            shell("fig2dev -L %stex_t %s -p %s %s > %s"
                  % (shfmt, fig2dev_args, fname_fmt, fname_fig, fname_tex))
        push(r"\input{%s}" % (fname_tex, ))
    else:
        # Convert directly to an external format that can be inserted with
        # \includegraphics.  Does not typeset labels with LaTeX.
        if not recall(fname_fmt, fname_fig, *deps):
            shell(f"fig2dev -L {fmt} {fig2dev_args} {fname_fig} {fname_fmt}")
        push(r"\includegraphics[%s]{%s}" % (args, fname_fmt))

def asy(name=None, args=''):
    """Insert an image generated from Asymptote source."""

    # If we don't have any text to compile, complain.
    if not self.content.strip() and not name:
        raise ValueError("Called asy() on an empty frame and no file to read. "
                        "This is unlikely to end well.")

    # If we don't have any text to compile, complain.
    if self.content.strip() and name:
        raise ValueError("Called asy() with both a file name and inline text. "
                         "Which one should I compile?")

    # Figure out which format we should convert to.
    if latex_mode == 'latex':
        fmt = 'eps'
    else:
        fmt = 'pdf'


    # Make sure we have a name and a file.
    save_file = False
    if not name:
        name = anonymous_name()
        save_file = True

    # Form the filenames.
    name_asy = ext(name, 'asy')
    name_fmt = ext(name, fmt)

    if save_file:
        save(name_asy)

    # Check for any  dependencies (i.e. import ....)
    deps = []
    pattern = r'^\s*import\s+([a-zA-Z._-]*)\s*;'
    for match in re.finditer(pattern, self.content, re.DOTALL):
        dep_mod = ext(match.group(1), 'asy')
        deps.append(dep_mod)

    # If any of these files exist in any import directories, import them.  If
    # not, no big deal.
    imprt(*deps, conditional=True)

    if not recall(name_fmt, name_asy, *deps):
        shell("asy %s -tex %s -f %s -o %s" % (name_asy, latex_mode, fmt, name_fmt))
    push("\\includegraphics[%s]{%s}" % (args, name_fmt))

def image(name_orig, args=''):
    """Insert an image into the document, converting to a format that is
    compatible with the selected latex_mode."""
    if latex_mode == 'latex':
        supported_fmts = ['eps']
        target_fmt = 'eps'
    else:
        supported_fmts = ['pdf', 'png', 'jpg', 'jpeg']
        target_fmt = 'pdf'

    _, fmt = os.path.splitext(name_orig)

    # If the image we have is not in a supported format, convert it.
    name_tgt = ext(name_orig, target_fmt)
    if fmt not in supported_fmts:
        if not recall(name_tgt, name_orig):
            if fmt == '.svg' and target_fmt == 'pdf':
                shell("inkscape %s --export-pdf=%s" % (name_orig, name_tgt))
            elif name_orig != name_tgt:
                shell("convert %s %s" % (name_orig, name_tgt))

    # Insert the image into the document.
    push("\\includegraphics[%s]{%s}" % (args, name_tgt))

]]]
